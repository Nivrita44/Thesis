You are given a tree∗
 with n
 nodes and values li,ri
 for each node. You can choose an initial value ai
 satisfying li≤ai≤ri
 for the i-th node. A tree is balanced if all node values are equal, and the value of a balanced tree is defined as the value of any node.

In one operation, you can choose two nodes u
 and v
, and increase the values of all nodes in the subtree†
 of node v
 by 1
 while considering u
 as the root of the entire tree. Note that u
 may be equal to v
.

Your goal is to perform a series of operations so that the tree becomes balanced. Find the minimum possible value of the tree after performing these operations. Note that you don't need to minimize the number of operations.

∗
A tree is a connected graph without cycles.

†
Node w
 is considered in the subtree of node v
 if any path from root u
 to w
 must go through v
.

Input
The first line of input contains a single integer t
 (1≤t≤10^5
) — the number of input test cases.

The first line of each test case contains one integer n
 (1≤n≤2⋅10^5
) — the number of nodes in the tree.

Then n
 lines follow. The i
-th line contains two integers li,ri
 (0≤li≤ri≤10^9
) — the constraint of the value of the i
-th node.

The next n−1
 lines contain the edges of the tree. The i
-th line contains two integers ui,vi
 (1≤ui,vi≤n
, ui≠vi
) — an edge connecting ui
 and vi
. It is guaranteed that the given edges form a tree.

It is guaranteed that the sum of n
 over all test cases does not exceed 2⋅10^5
.

Output
For each test case, output a single integer — the minimum possible value that all ai
 can be made equal to after performing the operations. It can be shown that the answer always exists.