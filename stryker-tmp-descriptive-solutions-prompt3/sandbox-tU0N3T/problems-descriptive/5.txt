This is the hard version of the problem. In this version, the limit of commands you can send is described in the statement. You can make hacks only if all versions of the problem are solved.

This is an interactive problem.

Welcome, Duelists! In this interactive challenge, there is an unknown integer x (1≤x≤109). You must make it equal to a given integer in the input n.
By harnessing the power of "Mathmech" monsters, you can send a command to do one of the following:

Command	             Constraint	                Result	             Case	            Update	            Jury's response
"add y"              −1018≤y≤1018	            res=x+y          if 1≤res≤1018          x←res                  "1"
                                                                   else                 x←x                    "0"

"mul y"              1≤y≤1018                   res=x⋅y           if 1≤res≤1018          x←res                  "1"
                                                                   else                 x←x                     "0"

"div y"              1≤y≤1018                   res=x/y          if y divides x         x←res                  "1"
                                                                    else                x←x                     "0"

 "digit"               —                        res=S(x)*             —                  x←res                   "1"              



Let f(n)
 be the minimum integer such that there is a sequence of f(n)
 commands that transforms x
 into n
 for all x(1≤x≤10^9)
. You do not know the value of x
 in advance. Find f(n)
 such that, no matter what x
 is, you can always transform it into n
 using at most f(n)
 commands.

Your task is to change x
 into n
 using at most f(n)
 commands.

∗
S(n)
 is a function that returns the sum of all the individual digits of a non-negative integer n
. For example, S(123)=1+2+3=6

Input

The first and only line of each test case contains one integer n
 (1≤n≤10^9
).

Interaction
The interaction for each test case begins by reading the integer n
.

To send a command, output a line in the following format:

"add y
" Add some integer y
 (−1018≤y≤1018
) to x
.
The jury will output "1" if x+y
 is within [1,1018]
 (successful), and "0" otherwise. If successful, update x←x+y
.

"mul y
" Multiply x
 by a positive integer y
 (1≤y≤1018
).
The jury will output "1" if x⋅y
 is within [1,1018]
 (successful), and "0" otherwise. If successful, update x←x⋅y
.

"div y
" Divide x
 by a positive integer y
 (1≤y≤1018
).
The jury will output "1" if y
 is a divisor of x
 (successful), and "0" otherwise. If successful, update x←xy
.

"digit" Make x
 equal to the sum of its digits.
The jury will always output "1" and update x←S(x)
.

Note that commands are case sensitive.

When you have determined that x
 is equal to n
, output a line in the following format:

"!" — where the jury will output a "1" if n
 is equal to x
, and "-1" otherwise.
Note that answering does not count toward your limit of commands.

If your program makes more than f(n)
 commands (f(n)
 is described above) for one test case, or makes an invalid command, then the response to the command will be "-1". After receiving such a response, your program should immediately terminate to receive the verdict Wrong Answer. Otherwise, it may receive any other verdict.

After printing a command, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:

fflush(stdout) or cout.flush() in C++;
System.out.flush() in Java;
sys.stdout.flush() in Python;
std::io::stdout().flush() in Rust;
see the documentation for other languages.
The interactor is non-adaptive. The unknown integer x
 does not change during the interaction.

Hacks

To hack, use the following format.

    

The first line of each test case should contain two positive integers n
 and x
 (1≤n,x≤10^9) — denoting the unknown integer and the target value to which it should be made equal, respectively.
	
