This is the easy version of the problem. The difference between the versions is that in this version, you only need to find one of the possible nodes Cirno may choose. You can hack only if you solved all versions of this problem.

Cirno and Daiyousei are playing a game with a tree∗
 of n
 nodes, rooted at node 1
. The value of the i
-th node is wi
. They take turns to play the game; Cirno goes first.

In each turn, assuming the opponent chooses j
 in the last turn, the player can choose any remaining node i
 satisfying wi>wj
 and delete the subtree†
 of node i
. In particular, Cirno can choose any node and delete its subtree in the first turn.

The first player who can not operate wins, and they all hope to win. Find one of the possible nodes Cirno may choose so that she wins if both of them play optimally.

∗
A tree is a connected graph without cycles.

†
Node u
 is considered in the subtree of node i
 if any path from 1
 to u
 must go through i
.

Input
The first line of input contains a single integer t
 (1≤t≤10^5
) — the number of input test cases.

The first line of each test case contains one integer n
 (1≤n≤4⋅10^5
) — the number of nodes in the tree.

The second line contains n
 integers w1,w2,…,wn
 (1≤wi≤n
) — the value of each node.

The next n−1
 lines contain the edges of the tree. The i
-th line contains two integers ui,vi
 (1≤ui,vi≤n
, ui≠vi
) — an edge connecting ui
 and vi
. It is guaranteed that the given edges form a tree.

It is guaranteed that the sum of n
 over all test cases does not exceed 4⋅10^5
.

Output
For each test case, print one line.

If Cirno wins the game, print any possible node she may choose in the first turn.

Otherwise, print "0" (without quotes).